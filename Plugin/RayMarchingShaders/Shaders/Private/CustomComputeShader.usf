#include "/Engine/Public/Platform.ush"

RWTexture2D<float3> RenderTarget;
float4x4 CameraWorld;
float4x4 CameraInverseProjection;

static const int MAX_STEPS_COUNT = 100;
static const float EPSILON = 0.001f;
static const float MAX_GLOW_DISTANCE = 1.0f;
static const float MAX_TRACE_DISTANCE = 100.0f;
static const float MANDELBULB_POWER = 8;
static const bool INIFINITE = false;

float SphereDistance(float3 position, float3 center, float radius)
{
    return distance(position, center) - radius;
}

// Mandelbulb distance estimation http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/
float MandelbulbDistance(float3 position)
{
    float3 z = position;
    float dr = 1.0;
    float r = 0.0;
    int iterations = 15;

    for (int i = 0; i < iterations; i++)
    {
        r = length(z);
        if (r > MAX_TRACE_DISTANCE)
        {
            break;
        }
        
        float theta = acos(z.z / r);
        float phi = atan2(z.y, z.x);
        dr = pow(r, MANDELBULB_POWER - 1.0) * MANDELBULB_POWER * dr + 1.0;

        float zr = pow(r, MANDELBULB_POWER);
        theta = theta * MANDELBULB_POWER;
        phi = phi * MANDELBULB_POWER;
		
        z = zr * float3(sin(theta) * cos(phi), sin(phi) * sin(theta), cos(theta));
        z += position;
    }
    return 0.5 * log(r) * r / dr;
}

// Polynomial smooth min 1 https://www.iquilezles.org/www/articles/smin/smin.htm
float SmoothMin(float a, float b, float k)
{
    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);
    return lerp(b, a, h) - k * h * (1.0 - h);
}

float Select(float distance1, float distance2, float smoothness, int mode)
{
    // Select first object.
    if (mode == 0)
    {
        return distance1;

    }
    // Select second object.
    else if (mode == 1)
    {
        return distance2;
    }
    // Blend objects.
    else
    {
        return SmoothMin(distance1, distance2, smoothness);
    }
}

float SceneDistance(float3 position)
{
    if (INIFINITE)
    {
        float repetition = 2.0f;
        float halfRepetition = repetition / 2.0f;
        position.xy = float3(abs(position.x) % repetition - halfRepetition, abs(position.y) % repetition - halfRepetition, position.z);
    }
    float displacement = 0.2f * cos(position.x * 5.0f) * cos(position.y * 4.0f) * cos(position.z * 6.0f);
    float distance1 = SphereDistance(position, float3(0.0f, 1.0f, 0.0f), 0.6f) + displacement;
    float distance2 = MandelbulbDistance(position);
    
    return Select(distance1, distance2, 0.7f, 2);
}

float3 CalculateNormal(float3 position)
{
    float x = SceneDistance(float3(position.x + EPSILON, position.y, position.z)) - SceneDistance(float3(position.x - EPSILON, position.y, position.z));
    float y = SceneDistance(float3(position.x, position.y + EPSILON, position.z)) - SceneDistance(float3(position.x, position.y - EPSILON, position.z));
    float z = SceneDistance(float3(position.x, position.y, position.z + EPSILON)) - SceneDistance(float3(position.x, position.y, position.z - EPSILON));
    return normalize(float3(x, y, z));
}

float3 RayMarch(float3 origin, float3 direction)
{
    float totalDistance = 0.0f;
    float closestDistance = MAX_GLOW_DISTANCE;
    float closestTotalDistance = 0.0f;
    
    for (int i = 0; i < MAX_STEPS_COUNT; ++i)
    {
        float3 position = origin + totalDistance * direction;
        float distance = SceneDistance(position);
        
        // Keep closest distance.
        if (distance < closestDistance)
        {
            closestDistance = distance;
            closestTotalDistance = totalDistance + distance;
        }
        if (distance < EPSILON)
        {
            // Calculate lighting.
            float3 normal = CalculateNormal(position);
            float3 lightDirection = normalize(origin - position);
            float diffuse = saturate(dot(normal, lightDirection));
            // diffuse /= length(origin - position);
            float specular = pow(saturate(dot(lightDirection, normal)), 200.0f);
            
            // Calculate ambient occlusion based on number of iterations.
            float ambientOcclusion = saturate(5.0f / i);
            // Calculate fog coefficient.
            float fog = 3.0f / (max(3.0f, totalDistance));
            
            return saturate(float3(0.8f, 0.0f, 0.0f) * diffuse * ambientOcclusion + specular) * fog;
        }

        if (totalDistance > MAX_TRACE_DISTANCE)
        {
            break;
        }
        totalDistance += distance;
    }
    // Add glow.
    if (closestDistance < MAX_GLOW_DISTANCE)
    {
        float fog = saturate(1.0f / closestTotalDistance);
        float glow = (1.0f / max(0.01f, closestDistance));
        return float3(0.02f, 0.01f, 0.01f) * glow * fog;
    }
    return float3(0.0f, 0.0f, 0.0f);
}

[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void CustomComputeShader(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint GroupIndex : SV_GroupIndex)
{
    uint width, height;
    RenderTarget.GetDimensions(width, height);
    
    float3 cameraPosition = mul(float4(0, 0, 0, 1), CameraWorld).xyz;
    
    float2 uv = DispatchThreadId.xy / float2(width, height) * 2 - 1;
    float3 direction = mul(float4(uv, 0, 1), CameraInverseProjection).xyz;
    direction = mul(float4(direction, 0), CameraWorld).xyz;
    direction = normalize(direction);

    float3 color = RayMarch(cameraPosition, normalize(direction));
    
    RenderTarget[DispatchThreadId.xy] = color;
}